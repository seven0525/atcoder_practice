{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# フィボナッチ数列"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fibo(n):\n",
    "    numbers = [0,1]\n",
    "    if n == 1:\n",
    "        print(0)\n",
    "    elif n == 2:\n",
    "        print(1)\n",
    "    else:\n",
    "        a = 0\n",
    "        b = 1\n",
    "        n = n-2\n",
    "        for i in range(n):\n",
    "            a, b = b, a+b\n",
    "            numbers.append(b)\n",
    "        print(numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"
     ]
    }
   ],
   "source": [
    "fibo(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# nの約数を全て求めて出力"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "def yakusu(n):\n",
    "    yakusu_list = []\n",
    "    for i in range(1,n+1):\n",
    "        if n % i == 0:\n",
    "            yakusu_list.append(i)\n",
    "    unique_yakusu_list = sorted(yakusu_list)\n",
    "    return (unique_yakusu_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 4, 8, 16]\n"
     ]
    }
   ],
   "source": [
    "print(yakusu(16))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# n以下の素数を出力"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sosu(n):\n",
    "    sosu_list  = []\n",
    "    for i in range(1,n+1):\n",
    "        yakusu_list = yakusu(i)\n",
    "        yakusu_list = list(yakusu_list)\n",
    "        if len(yakusu_list) == 2:\n",
    "            sosu_list.append(i)\n",
    "    return(sosu_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5, 7]\n"
     ]
    }
   ],
   "source": [
    "print(sosu(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 合計金額のパターン"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "20\n",
      "30\n",
      "1500\n",
      "33\n"
     ]
    }
   ],
   "source": [
    "N = 4\n",
    "a = []\n",
    "for i in range(N):\n",
    "    a.append(int(input()))\n",
    "    \n",
    "paterns = 0\n",
    "A = a[0]\n",
    "B = a[1]\n",
    "C = a[2]\n",
    "X = a[3]\n",
    "\n",
    "max_A = X/500\n",
    "max_B = X/100\n",
    "max_C = X/50\n",
    "\n",
    "for i in range(A):\n",
    "    for j in range(B):\n",
    "        for k in range(C):\n",
    "            if 500 * i + 100 * j + 50 * k == X:\n",
    "                paterns+=1\n",
    "print(paterns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 10進法の各桁の和"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "2\n",
      "5\n",
      "84\n"
     ]
    }
   ],
   "source": [
    "N = 3\n",
    "a = []\n",
    "for i in range(N):\n",
    "    a.append(int(input()))\n",
    "    \n",
    "N = a[0]\n",
    "A = a[1]\n",
    "B = a[2]\n",
    "\n",
    "answer = 0\n",
    "\n",
    "for n in range(1,N+1):\n",
    "    n = str(n)\n",
    "    array = list(map(int,n))\n",
    "    sum_array = sum(array)\n",
    "    if A <= sum_array and sum_array <= B:\n",
    "        answer += int(n)\n",
    "    \n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 2\n",
    "a = []\n",
    "for i in range(N):\n",
    "    a.append((input()))\n",
    "    \n",
    "N = a[0]\n",
    "A = a[1]\n",
    "answers = []\n",
    "alice = 0\n",
    "bob = 0\n",
    "\n",
    "A = A.split(\",\")\n",
    "for n in A:\n",
    "    n = int(n)\n",
    "    answers.append(n)\n",
    "    \n",
    "answers.sort(reverse=True)\n",
    "for i in range(int(N)):\n",
    "    if i%2 == 0:\n",
    "        alice += answers[i]\n",
    "    else:\n",
    "        bob += answers[i]\n",
    "\n",
    "print(alice-bob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
